(*
	LanHEP output produced at Tue Apr 25 17:16:14 2017
	from the file '/export/home/ab1u06/export/belyaev/Dropbox/VDM/vdm_model/vdm_for_fa.lhep'
	Model named 'VDM'
*)

(*
 This file is derived from:
	Lorentz.gen
		Generic model file for the Lorentz formalism
		by A. Denner, H. Eck, O. Hahn, S. Kueblbeck 1995
		last modified 4 Dec 02 by Thomas Hahn

  Generic couplings are regenerated by LanHEP

This file defines the generic analytical propagators and couplings.
The model described herein is the standard generic model of renormalisable
field theories (11 generic couplings) with 3 additional 2-vertices.

Reference:
	A. Denner, "Techniques for the calculation of electroweak
	radiative corrections at the one-loop level and results for
	W-physics at LEP200", Fortschr. d. Physik 41 (1993) 4
*)

	(* Kinematic indices are "transported" along a propagator line.
	   KinematicIndices[X] = {Name} means that the generic field X
	   will carry an index Index[Name, i] along the line:  
	   X[ n, {m..}, p, {Index[Name, i]} -> {Index[Name, i + 1]} ] *)

KinematicIndices[ F ] = {};
KinematicIndices[ V ] = {Lorentz};
KinematicIndices[ S ] = {};
KinematicIndices[ SV ] = {Lorentz};
KinematicIndices[ U ] = {}


Attributes[ FAMetricTensor ] = Attributes[ FAScalarProduct ] = {Orderless}


FAFourVector/: -FAFourVector[ mom_, mu_ ] := FAFourVector[Expand[-mom], mu]

FAFourVector[ 0, _ ] = 0


SpinorType[j_Integer, ___] := MajoranaSpinor /; SelfConjugate[F[j]]

SpinorType[_Integer, __] = FADiracSpinor


M$GenericPropagators = {

	(* general fermion propagator: *)

  AnalyticalPropagator[External][ s1 F[j1, mom] ] == 
    FANonCommutative[ SpinorType[j1][-mom, Mass[F[j1]]] ],

	(* Remarks:
	   Fermionic propagators have (like all others, too) their
	   momentum flowing from left to right. The fermion flow (for
	   Dirac fermions: fermion number flow) is from right to left.
	   If the fermion inside the propagator has no sign (i.e. fermion
	   number flow is opposite to fermion flow or fermion is self
	   conjugate) we just use the internal propagator S(-p).
	   If the fermion has a sign, we have to use the Feynman rule S(p)
	   according to the Majorana paper. However, this rule is given
	   for a momentum flowing against the fermion flow so, again, we
	   end up with S(-p). *)

  AnalyticalPropagator[Internal][ s1 F[j1, mom] ] ==
    FANonCommutative[ FADiracSlash[-mom] + Mass[F[j1]] ] *
      I FAPropagatorDenominator[mom, Mass[F[j1]]], 

	(* general vector boson propagator: *)

  AnalyticalPropagator[External][ s1 V[j1, mom, {li2}] ] ==
    FAPolarizationVector[V[j1], mom, li2],

  AnalyticalPropagator[Internal][ s1 V[j1, mom, {li1} -> {li2}] ] ==
    -I FAPropagatorDenominator[mom, Mass[V[j1]]] *
      (FAMetricTensor[li1, li2] - (1 - FAGaugeXi[V[j1]]) *
         FAFourVector[mom, li1] FAFourVector[mom, li2] *
         FAPropagatorDenominator[mom, Sqrt[FAGaugeXi[V[j1]]] Mass[V[j1]]]),

	(* general mixing scalar-vector propagator: *)

  AnalyticalPropagator[Internal][ s1 SV[j1, mom, {li1} -> {li2}] ] == 
    I Mass[SV[j1]] FAPropagatorDenominator[mom, Mass[SV[j1]]] *
      FAFourVector[mom, If[s1 == 1 || s1 == -2, li1, li2]],

	(* general scalar propagator: *)

  AnalyticalPropagator[External][ s1 S[j1, mom] ] == 1,

  AnalyticalPropagator[Internal][ s1 S[j1, mom] ] ==
    I FAPropagatorDenominator[mom, Sqrt[FAGaugeXi[S[j1]]] Mass[S[j1]]],

	(* general Fadeev-Popov ghost propagator: *)

  AnalyticalPropagator[External][ s1 U[j1, mom] ] == 1,

  AnalyticalPropagator[Internal][ s1 U[j1, mom] ] ==
    I Sqrt[FAGaugeXi[U[j1]]] *
       FAPropagatorDenominator[mom, Sqrt[FAGaugeXi[U[j1]]] Mass[U[j1]]]
 } 


	(* Generic analytical couplings for the model *)

M$GenericCouplings = {

	(* V-V *)
    AnalyticalCoupling[ s1 V[j1, mom1, {li1}], s2 V[j2, mom2, {li2}]] ==
   G[1][ s1 V[j1], s2 V[j2]] .
    { FAMetricTensor[li1, li2] FAScalarProduct[mom1, mom2],
      FAMetricTensor[li1, li2],
      FAFourVector[mom1, li2] FAFourVector[mom2, li1] },

	(* S-V *)
    AnalyticalCoupling[ s1 S[j1, mom1], s2 V[j2, mom2, {li2}]] ==
   G[1][ s1 S[j1], s2 V[j2]] .
    { FAFourVector[mom1, li2],
      FAFourVector[mom2, li2] },

	(* S-S *)
    AnalyticalCoupling[ s1 S[j1, mom1], s2 S[j2, mom2]] ==
   G[1][ s1 S[j1], s2 S[j2]] .
    { FAScalarProduct[mom1, mom2],
      1 },

	(* U-U-V *)
    AnalyticalCoupling[ s1 U[j1, mom1], s2 U[j2, mom2], 
		s3 V[j3, mom3, {li3}]] ==
   G[1][ s1 U[j1], s2 U[j2], s3 V[j3]] .
    { FAFourVector[mom1, li3],
      FAFourVector[mom2, li3] },

	(* F-F-V *)
    AnalyticalCoupling[ s1 F[j1, mom1], s2 F[j2, mom2], 
		s3 V[j3, mom3, {li3}]] ==
   G[-1][ s1 F[j1], s2 F[j2], s3 V[j3]] .
    { FANonCommutative[FADiracMatrix[li3], FAChiralityProjector[-1]],
      FANonCommutative[FADiracMatrix[li3], FAChiralityProjector[+1]] },

	(* U-U-S *)
    AnalyticalCoupling[ s1 U[j1, mom1], s2 U[j2, mom2], 
		s3 S[j3, mom3]] ==
   G[1][ s1 U[j1], s2 U[j2], s3 S[j3]] .
    { 1 },

	(* S-S-S *)
    AnalyticalCoupling[ s1 S[j1, mom1], s2 S[j2, mom2], 
		s3 S[j3, mom3]] ==
   G[1][ s1 S[j1], s2 S[j2], s3 S[j3]] .
    { 1 },

	(* S-S-V *)
    AnalyticalCoupling[ s1 S[j1, mom1], s2 S[j2, mom2], 
		s3 V[j3, mom3, {li3}]] ==
   G[1][ s1 S[j1], s2 S[j2], s3 V[j3]] .
    { FAFourVector[mom1, li3],
      FAFourVector[mom2, li3] },

	(* S-V-V *)
    AnalyticalCoupling[ s1 S[j1, mom1], s2 V[j2, mom2, {li2}], 
		s3 V[j3, mom3, {li3}]] ==
   G[1][ s1 S[j1], s2 V[j2], s3 V[j3]] .
    { FAMetricTensor[li2, li3] },

	(* F-F-S *)
    AnalyticalCoupling[ s1 F[j1, mom1], s2 F[j2, mom2], 
		s3 S[j3, mom3]] ==
   G[1][ s1 F[j1], s2 F[j2], s3 S[j3]] .
    { FANonCommutative[FAChiralityProjector[+1]],
      FANonCommutative[FAChiralityProjector[-1]] },

	(* V-V-V *)
    AnalyticalCoupling[ s1 V[j1, mom1, {li1}], s2 V[j2, mom2, {li2}], 
		s3 V[j3, mom3, {li3}]] ==
   G[1][ s1 V[j1], s2 V[j2], s3 V[j3]] .
    { FAMetricTensor[li1, li2] FAFourVector[mom2, li3],
      FAMetricTensor[li2, li3] FAFourVector[mom2, li1],
      FAMetricTensor[li1, li3] FAFourVector[mom3, li2],
      FAMetricTensor[li2, li3] FAFourVector[mom3, li1],
      FAMetricTensor[li1, li3] FAFourVector[mom1, li2],
      FAMetricTensor[li1, li2] FAFourVector[mom1, li3] },

	(* S-S-S-S *)
    AnalyticalCoupling[ s1 S[j1, mom1], s2 S[j2, mom2], 
		s3 S[j3, mom3], s4 S[j4, mom4]] ==
   G[1][ s1 S[j1], s2 S[j2], s3 S[j3], s4 S[j4]] .
    { 1 },

	(* S-S-V-V *)
    AnalyticalCoupling[ s1 S[j1, mom1], s2 S[j2, mom2], 
		s3 V[j3, mom3, {li3}], s4 V[j4, mom4, {li4}]] ==
   G[1][ s1 S[j1], s2 S[j2], s3 V[j3], s4 V[j4]] .
    { FAMetricTensor[li3, li4] },

	(* V-V-V-V *)
    AnalyticalCoupling[ s1 V[j1, mom1, {li1}], s2 V[j2, mom2, {li2}], 
		s3 V[j3, mom3, {li3}], s4 V[j4, mom4, {li4}]] ==
   G[1][ s1 V[j1], s2 V[j2], s3 V[j3], s4 V[j4]] .
    { FAMetricTensor[li1, li2] FAMetricTensor[li3, li4],
      FAMetricTensor[li1, li3] FAMetricTensor[li2, li4],
      FAMetricTensor[li1, li4] FAMetricTensor[li2, li3] }
}


	(* FlippingRules: the flipping rules determines how Dirac
	   objects change when the order of fermion fields in the
	   coupling is reversed. In other words, it defines how the
	   coupling C[F, -F, ...] is derived from C[-F, F, ...].
	   Of the elements of the Dirac algebra we need to consider
	   only gamma_mu omega_pm since the others are either
	   unchanged or not used (sigma_{mu,nu}).
	   See Denner, Eck, Hahn, Kueblbeck, NPB 387 (1992) 467. *)

M$FlippingRules =
  FANonCommutative[dm:_FADiracMatrix | _FADiracSlash, FAChiralityProjector[pm_]] ->
    -FANonCommutative[dm, FAChiralityProjector[-pm]]

	(* TruncationRules: rule for omitting the wave functions of
	   external Propagators defined in this file. *)

M$TruncationRules = {
  _FAPolarizationVector -> 1,
  _FADiracSpinor -> 1,
  _MajoranaSpinor -> 1 
 } 

	(* LastGenericRules: the very last rules that are applied to an
	   amplitude before it is returned by CreateFeynAmp. *)

M$LastGenericRules = {
  FAPolarizationVector[p_, _. mom:FourMomentum[Outgoing, _], li_] :>
    Conjugate[FAPolarizationVector][p, mom, li]
 } 


	(* cosmetics: *)

	(*  left spinor in chain + mom incoming -> bar v
	    left spinor in chain + mom outgoing -> bar u
	   right spinor in chain + mom incoming -> u
	   right spinor in chain + mom outgoing -> v *)
Format[
  FermionChain[
    FANonCommutative[_[s1_. mom1_, mass1_]],
    r___,
    FANonCommutative[_[s2_. mom2_, mass2_]]] ] :=
  Overscript[If[FreeQ[mom1, Incoming], "u", "v"], "_"][mom1, mass1] .
    r . If[FreeQ[mom2, Outgoing], "u", "v"][mom2, mass2]

Format[ FADiracSlash ] = "gs"

Format[ FADiracMatrix ] = "ga"

Format[ FAChiralityProjector[1] ] = SequenceForm["om", Subscript["+"]]

Format[ FAChiralityProjector[-1] ] = SequenceForm["om", Subscript["-"]]

Format[ FAGaugeXi[a_] ] := SequenceForm["xi", Subscript[a]]

Format[ FAPolarizationVector ] = "ep"

Unprotect[Conjugate];
Format[ Conjugate[a_] ] = SequenceForm[a, Superscript["*"]];
Protect[Conjugate]

Format[ FAMetricTensor ] = "g"

Format[ FAScalarProduct[a__] ] := Dot[a]

Format[ FAFourVector[a_, b_] ] := a[b]

